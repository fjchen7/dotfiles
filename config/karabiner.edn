;; ref
;;   - example: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org
;;   - example configuration: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/resources/configurations/edn/example.edn
;;   - tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;;   - keycodes: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
;;   - karabiner:
;;     - keycodes: https://github.com/pqrs-org/Karabiner-Elements/blob/main/src/apps/SettingsWindow/Resources/simple_modifications.json
;;     - modifiers keys: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/#frommodifiersmandatory
;;     - complex_modifications manipulator definition: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/
;;   - helpful user configuration examples
;;     - https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn

;; code won't read cheatsheet section
;; ! for mandatory
;; # for optional
;; ## for optional any
;; C T O S for left command control optional shift
;; Q W E R for right command control optional shift
;; !! for mandatory command + control + optional + shift (hyper)
;; need to prefix C T O S F with ! or #
;; F for fn
;; P for caps_lock
{
  ;; Casesensitive
  :applications {
    :browser ["^com\\.microsoft\\.edgemac$" "^com\\.google\\.Chrome$" "^com\\.apple\\.Safari$"]
    :terminal ["^net.kovidgoyal.kitty$" "^com\\.googlecode\\.iterm2$" "^com.jetbrains" "^com\\.microsoft\\.VSCode$" "^com\\.apple\\.Terminal$"]
    :intelliJ ["^com.jetbrains"]

    :IDEA ["^com\\.jetbrains\\.intellij\\.ce$"]
    :GoLand ["^com\\.jetbrains\\.goland$"]

    :Edge ["^com\\.microsoft\\.edgemac$"]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :Kitty ["^net.kovidgoyal.kitty$"]
    :Alacritty ["^org.alacritty$"]
    :VSCode ["^com\\.microsoft\\.VSCode$"]
    :intelliJ-IDEA ["^com\\.jetbrains\\.intellij$"]
    :intelliJ-GoLand ["^com\\.jetbrains\\.goland$"]

    :WeChat ["^com\\.tencent\\.xinWeChat$"]
    :Discord ["^com\\.hnc\\.Discord$"]
    :Telegram ["^ru\\.keepcoder\\.Telegram$"]
    :Slack ["^com\\.tinyspeck\\.slackmacgap$"]

    :Karabiner-Elements ["^org\\.pqrs\\.Karabiner-Elements\\.Preferences$"]
    :Karabiner-EventViewer ["^org\\.pqrs\\.Karabiner-EventViewer$"]
    :Hammerspoon ["^org\\.hammerspoon\\.Hammerspoon$"]

    :OpenCat ["^tech\\.baye\\.OpenCat$"]
    :ChatGPT ["^com\\.openai\\.chat$"]
    :Obsidian ["^md\\.obsidian$"]
    :Notion ["^notion\\.id$"]
    :Things3 ["^com\\.culturedcode\\.ThingsMac$"]
    :Raindrop ["^io\\.raindrop\\.macapp$"]
    :Bitwarden ["^com\\.bitwarden\\.desktop$"]
    :Flomo ["^com\\.google\\.Chrome\\.app\\.mjnbhimggobpdngjimoodpenobognheo"]
    :PDFExpert ["^com\\.readdle\\.PDFExpert-Mac$"]
    :Youdao ["^com\\.youdao\\.YoudaoDict"]
    :Finder ["^com\\.apple\\.finder$"]
    :SystemReferences ["^com\\.apple\\.systempreferences$"]
    :Music ["^com\\.apple\\.Music$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :ActivityMonitor ["^com\\.apple\\.ActivityMonitor$"]
  }

  :input-sources {
    :pinyin {
        :input_mode_id "com.apple.inputmethod.SCIM.Shuangpin"
        :input_source_id "com.apple.inputmethod.SCIM.Shuangpin"
        :language "zh-Hans"
    }
    :us {
      :input_mode_id ""
      :input_source_id "com.apple.keylayout.US"
      :language "en"
    }
  }

  :templates {
    :open "open \"%s\""
    :openApp "/opt/homebrew/bin/hs -c \"spoon.Win.openOrHideApp('%s')\""
    :safeOpen "/opt/homebrew/bin/hs -c \"SafeOpen('%s')\""
    :edit "/usr/local/bin/code \"%s\""
    ;; AppleScipt keystroke and key code table: https://eastmanreference.com/complete-list-of-applescript-key-codes
    ;; have permission issues: 'System Events got an error: osascript is not allowed to send keystrokes.'
    ;; :alfred "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\" to keystroke \"%s\"'"
    ;; :alfred-execute "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\"' -e 'keystroke \"%s\"' -e 'key code 36' -e 'end tell'"
    :alfred "/opt/homebrew/bin/hs -c \"Alfred('%s')\""
    :alfred-execute "/opt/homebrew/bin/hs -c \"Alfred('%s', true)\""
    :alfred-flow "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :hs "/opt/homebrew/bin/hs -c \"%s\""
    :script "/usr/local/bin/bash ~/.dotfiles/karabiner/scripts/%s"

    :openObsidian "/opt/homebrew/bin/hs -c \"spoon.Win.openOrHideObsidian('%s')\""
    :zellij "/opt/homebrew/bin/zellij -s 'default' action %s"
  }

  ;;; helper function to generate things little bit quicker
  ;; quick define "layers" or "state" feature(use set_variable)
  ;; can use as conditions in rule list
  ;; {:<layer name> {:from <froms>}}
  :simlayers {
    ;; most frequently used modes
    ; :app-mode {:key :spacebar :condi :!terminal}
    :spacebar-mode {:key :spacebar}
    :terminal-mode {:key :j}
  }
  :simlayer-threshold 250

  ;; Examples
  ;; [:0 [:!!5] nil {:alone :pinyin}] change input method
  :main [
    {:des "keys without prefix"
      :rules [
        ; map caps_lock to control
        [:##caps_lock {:key :right_control} nil {:alone :escape}]
        ; super key
        ; [:##right_command {:key :right_command :modi [:right_control :right_option :right_shift]} nil {:alone :right_command}]
        ; [:escape :escape nil {:alone [:hs "spoon.Win.switchApp()"]}]
        [:escape nil nil {:alone :dashboard}]
        ; [:##right_shift :right_shift nil {:alone :!Cspacebar}]
        [:##right_shift :right_shift nil {:alone [:openApp "ChatGPT"]}]
        ; [:##right_shift :right_shift nil {:alone [:hs "spoon.Win.activate()"]}] ;; Window management
        ; [:##right_command :right_command nil {:alone [:openApp "kitty"]}]
        ; [:##right_shift :right_shift nil {:alone [:openApp "Obsidian"]}]
        ; [:##right_option :right_option nil {:alone [:openApp "Google Chrome"]}]
        ; [:##left_control :left_control nil {:alone [:hs "spoon.Win.activate()"]}] ;; Window management
      ]
    }
    {:des "Applications"
      :rules [
        ;; Applications
        ; [:!Tn [:openApp "Notion"]]
        ; [:!Th :!CTOf11] ;; switch WeChat (need to set shortcut in Wechat)
        [:!Th [:openApp "WeChat"]]
        [:!Tt [:openApp "Telegram"]]
        [:!Tm [:openApp "Discord"]]
        [:!Tj [:openApp "Slack"]]

        [:!Tq [:openApp "Music"]]
        ; [:!Tu [:openApp "OpenCat"]]

        [:!Treturn_or_enter [:openApp "Things3"]]
        [:!TCreturn_or_enter :!!5 :browser]
        [:!TCreturn_or_enter [:!TOC5]] ;; add Things3 task

        [:!T1 [:openObsidian "Main"]]
        [:!T2 [:openObsidian "Coding"]]
        [:!T3 [:openObsidian "Rust"]]
        [:!T4 [:openObsidian "Web"]]
        [:!T5 [:openObsidian "Photography"]]
        [:!T0 [:openObsidian "Web3"]]
        [:!Tp [:openApp "Obsidian"]]

        ; [:!Tl [:openApp "Arc"]]
        [:!Tgrave_accent_and_tilde [:openApp "Google Chrome"]]
        [:!Tv [:openApp "Visual Studio Code"]]
        [:!Tr [:openApp "RustRover"]]
        [:!Te [:openApp "Finder"]]
        ; [:!Tk [:openApp "Alacritty"]]
        [:!Tk :!Ch :Kitty]
        [:!Tk [:openApp "Kitty"]]
        [:!Tbackslash [:openApp "Bitwarden"]]

        ; [:!Tp :!COSf12] ;; Quick flomo
        ; [:!Tq :!CTOf12] ;; switch flomo (need to set shortcut in flomo)
        [:!Tn [:openApp "Notes"]]
        ; [:!Tr :!CTS4]  ;; Look word up in Eudic dictionary
        [:!Ty [:openApp "网易有道翻译"]]
        [:!Tl [:hs "spoon.Win.activate()"]] ;; Window management

        [:!Cw [:zellij "close-pane"] :Alacritty]
        ; [:!Cl [:zellij "focus-next-pane"] :Alacritty]
        ; [:!Ch [:zellij "focus-previous-pane"] :Alacritty]
        [:!CSh [:zellij "move-pane left"] :Alacritty]
        [:!CSj [:zellij "move-pane down"] :Alacritty]
        [:!CSk [:zellij "move-pane up"] :Alacritty]
        [:!CSl [:zellij "move-pane right"] :Alacritty]
        ; [:!CSd [:zellij "new-pane -d right"] :Alacritty]
        ; [:!Cd [:zellij "new-pane -d down"] :Alacritty]
        [:!Cd [:!Om :v] :Alacritty] ; Split right
        [:!CSd [:!Om :s] :Alacritty] ; Split down
        [:!Cf [:zellij "switch-mode EnterSearch"] :Alacritty]
        [:!Ct [:zellij "new-tab"] :Alacritty]
        [:!CSw [:zellij "close-tab"] :Alacritty]
        [:!CSclose_bracket [:zellij "go-to-next-tab"] :Alacritty]
        [:!CSopen_bracket [:zellij "go-to-previous-tab"] :Alacritty]
        ; [:!Cr [:zellij "switch-mode RenameTab"] :Alacritty]
        [:!Cr [:!Om :r] :Alacritty] ; Rename pane
        [:!CSr [:!Om :!Sr] :Alacritty] ; Rename tab
        [:!COclose_bracket [:zellij "move-tab right"] :Alacritty]
        [:!COopen_bracket [:zellij "move-tab left"] :Alacritty]
        [:!C1 [:zellij "go-to-tab 1"] :Alacritty]
        [:!C2 [:zellij "go-to-tab 2"] :Alacritty]
        [:!C3 [:zellij "go-to-tab 3"] :Alacritty]
        [:!C4 [:zellij "go-to-tab 4"] :Alacritty]
        [:!C5 [:zellij "go-to-tab 5"] :Alacritty]
        [:!C6 [:zellij "go-to-tab 6"] :Alacritty]
        [:!C7 [:zellij "go-to-tab 7"] :Alacritty]
        [:!C8 [:zellij "go-to-tab 8"] :Alacritty]
        [:!C9 [:zellij "go-to-tab 9"] :Alacritty]
        [:!Creturn_or_enter [:zellij "toggle-fullscreen"] :Alacritty]
        [:!Cbackslash [:zellij "toggle-floating-panes"] :Alacritty]
        [:!CObackslash [:zellij "toggle-pane-embed-or-floating"] :Alacritty]
        [:!Ce [:!Om :spacebar :escape] :Alacritty]  ; swap layout
      ]
    }
    {:des "left control"
      :rules [
        ; [:!Tgrave_accent_and_tilde :!OSv]  ; show clipboard (supported by Raycast)
        [:!Tspacebar :!CTOSspacebar]  ;; Raycast
        [:!Tcomma [:hs "spoon.Config:activate()"]]  ;; Config
        [:!Tb [:hs "spoon.Bookmark:activate()"]]  ;; Bookmark
        ; [:!Tgrave_accent_and_tilde [:hs "spoon.Win.centerCursor()"]]  ;; Center mouse
        ;; previous / next tabs
        [:!Ti :!CSopen_bracket :iTerm]
        [:!To :!CSclose_bracket :iTerm]
        [:!Ti :!TStab :Finder]
        [:!To :!Ttab :Finder]
        [:!Ti :!CSopen_bracket :VSCode]
        [:!To :!CSclose_bracket :VSCode]
        [:!Ti :!CSopen_bracket :intelliJ]
        [:!To :!CSclose_bracket :intelliJ]
        [:!Ti :up_arrow :WeChat]
        [:!To :down_arrow :WeChat]
        [:!Ti :!Oup_arrow :Discord]
        [:!To :!Odown_arrow :Discord]
        [:!Ti :!Oup_arrow :Telegram]
        [:!To :!Odown_arrow :Telegram]
        [:!Ti :!TStab]
        [:!To :!Ttab]
        ; fullscreen (local)
        [:!Tf [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 1 })"]]
        ; [:!TSf [:hs "spoon.Win.resizeWindow({ x = 0.1, y = 0, w = 0.8, h = 1 })"]]
        ; 1/2: ctrl (auto resize)
        ; [:!Tslash [:hs "spoon.Win.resizeWindowAuto(0.5)"]]
        ; [:!TOslash [:hs "spoon.Win.resizeWindowAuto(0.5, true)"]]
        ; 2/3: ctrl + cmd (auto resize)
        [:!TCslash [:hs "spoon.Win.resizeWindowAuto(0.66)"]]
        [:!TCOslash [:hs "spoon.Win.resizeWindowAuto(0.66, true)"]]
        ; ; 1/2: ctrl
        [:!Ta [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 })"]]
        [:!Ts [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 })"]]
        [:!Td [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 })"]]
        [:!Tw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 })"]]
        [:!TOa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 }, true)"]]
        [:!TOs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 }, true)"]]
        [:!TOd [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 }, true)"]]
        [:!TOw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 }, true)"]]
        ; ; 2/3: ctrl+cmd
        [:!TSa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 })"]]
        [:!TSs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 })"]]
        [:!TSd [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 })"]]
        [:!TSw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 })"]]
        [:!TOSw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 })"]]
        [:!TOSa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 }, true)"]]
        [:!TOSs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 }, true)"]]
        [:!TOSd [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 }, true)"]]
        ; [:!TOCw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 }, true)"]]
        ; ;; 1/3
        [:!TCa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 })"]]
        [:!TCs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.66 })"]]
        [:!TCd [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 })"]]
        [:!TCw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 })"]]
        [:!TOCa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 }, true)"]]
        [:!TOCs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.34 }, true)"]]
        [:!TOCd [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 }, true)"]]
        [:!TOCw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 }, true)"]]
        ;; desktop navigation
        [:!Tz :!CTOf7] ;; Previous Space
        [:!Tc :!CTOf9] ;; Next Space
        [:!Tx :mission_control] ;; Mission Control
        ;; move window to space and focus
        [:!TSz [:hs "MoveFocusedWindowToSpace('prev', true)"]]
        [:!TSc [:hs "MoveFocusedWindowToSpace('next', true)"]]
        [:!TSx :!!f2] ;; Application Windows
        [:!Ttab [:hs "spoon.Win.moveToScreen('next')"]] ; move window to recent display and focus
        ; [:!TSdelete_or_backspace [:hs "ShowFocusedWindowInfo()"]]
        [:!TCdelete_or_backspace :!!f11] ;; Show Desktop
        [:!Tdelete_or_backspace :!Tf3]  ;; focus on docker
        [:!TSdelete_or_backspace :!CTSf2]  ;; hide/show Dock
        ;; act like fn + f1..f12
        [:!Tf1 :display_brightness_decrement]
        [:!Tf2 :display_brightness_increment]
        [:!Tf3 :mission_control]
        [:!Tf4 :dashboard]
        [:!Tf7 :vk_consumer_previous]
        [:!Tf8 :play_or_pause]
        [:!Tf9 :vk_consumer_next]
        [:!Tf10 :mute]
        [:!Tf11 :volume_decrement]
        [:!Tf12 :volume_increment]
        ;; home / end
        [:!Thyphen [:home]]
        [:!Tequal_sign  [:end]]
        [:!TShyphen [:!Shome]]
        [:!TSequal_sign  [:!Send]]
      ]
    }
    {:des "spacebar mode"
      :rules [:spacebar-mode
        ;; previous / next tabs
        [:i :!CSopen_bracket :iTerm]
        [:o :!CSclose_bracket :iTerm]
        [:i :!TStab :Finder]
        [:o :!Ttab :Finder]
        [:i :!CSopen_bracket :VSCode]
        [:o :!CSclose_bracket :VSCode]
        [:i :!CSopen_bracket :intelliJ]
        [:o :!CSclose_bracket :intelliJ]
        [:i :up_arrow :WeChat]
        [:o :down_arrow :WeChat]
        [:i :!Oup_arrow :Discord]
        [:o :!Odown_arrow :Discord]
        [:i :!Oup_arrow :Telegram]
        [:o :!Odown_arrow :Telegram]
        [:i :!TStab]
        [:o :!Ttab]
        ;; home and end
        ; [:hyphen [:home]]
        ; [:equal_sign  [:end]]
        ; [:!Shyphen [:!Shome]]
        ; [:!Sequal_sign  [:!Send]]
        ;; mouse move
        [:w {:mkey {:y -1600 :speed 1.20}}]
        [:s {:mkey {:y 1600 :speed 1.20}}]
        [:a {:mkey {:x -1600 :speed 1.20}}]
        [:d {:mkey {:x 1600 :speed 1.20}}]
        [:!Sw {:mkey {:y -3200 :speed 1.10}}]
        [:!Ss {:mkey {:y 3200 :speed 1.10}}]
        [:!Sa {:mkey {:x -3200 :speed 1.10}}]
        [:!Sd {:mkey {:x 3200 :speed 1.10}}]
        [:!Ow {:mkey {:y -800 :speed 1.20}}]
        [:!Os {:mkey {:y 800 :speed 1.20}}]
        [:!Oa {:mkey {:x -800 :speed 1.20}}]
        [:!Od {:mkey {:x 800 :speed 1.20}}]
        ;; center mouse on focused window
        [:m [:hs "spoon.Win.centerCursor()"]]  ;; Config
        ;; arrow key
        [:h [:left_arrow]]
        [:j [:down_arrow]]
        [:k [:up_arrow]]
        [:l [:right_arrow]]
        [:!Sh [:!Sleft_arrow]]
        [:!Sj [:!Sdown_arrow]]
        [:!Sk [:!Sup_arrow]]
        [:!Sl [:!Sright_arrow]]
        [:!Oh [:!Oleft_arrow]]
        [:!Oj [:!Odown_arrow]]
        [:!Ok [:!Oup_arrow]]
        [:!Ol [:!Oright_arrow]]
        [:!Ch [:!Cleft_arrow]]
        [:!Cj [:!Cdown_arrow]]
        [:!Ck [:!Cup_arrow]]
        [:!Cl [:!Cright_arrow]]
        [:!CSh [:!CSleft_arrow]]
        [:!CSj [:!CSdown_arrow]]
        [:!CSk [:!CSup_arrow]]
        [:!CSl [:!CSright_arrow]]
        ;; menu
        [:!Ttab [:hs "RightClickFocusedWindow()"]]
        ;; scroll
        [:p {:mkey {:vwheel -32 :speed 1.30}}]
        [:n {:mkey {:vwheel 32 :speed 1.30}}]
        [:!Sp {:mkey {:vwheel -64 :speed 1.30}}]
        [:!Sn {:mkey {:vwheel 64 :speed 1.30}}]
        [:!Op {:mkey {:vwheel -20 :speed 1.30}}]
        [:!On {:mkey {:vwheel 20 :speed 1.30}}]
        ;; left click
        [:return_or_enter :button1]
        [:!Creturn_or_enter {:pkey :button1 :modi :left_command}]
        [:!Treturn_or_enter {:pkey :button1 :modi :left_control}]
        [:!Oreturn_or_enter {:pkey :button1 :modi :left_option}]
        [:!Sreturn_or_enter {:pkey :button1 :modi :left_shift}]
        ;; right click
        [:backslash :button2]
      ]
    }
    {:des "terminal (j)"
      :rules [[:condi :terminal-mode] ;; :terminal]
        ;; terminal
        [:escape [:!Tu :e :x :i :t :return_or_enter]] ; exit terminal
        [:r [:!Ta :t :l :d :r :spacebar :return_or_enter]] ; tldr
        [:u [:!Tu :c :l :e :a :r :return_or_enter]] ; clear screen
        ;; vim
        [:q [:escape :escape :!Ssemicolon :!Tu :q :!S1 :return_or_enter]] ; exit in vim
        [:w [:escape :escape :!Ssemicolon :!Tu :w :q :!S1 :return_or_enter]] ; save and exit in vim
        [:v [:spacebar :!Sbackslash :spacebar :v :i :m :spacebar :hyphen :return_or_enter]] ; temporary cat in vim
        ;; reload zsh
        [:z [:!Tu :e :x :e :c :spacebar :z :s :h :return_or_enter]]

        ;; zle widget
        [:c [:!Tg :c]] ; command cheatsheet
        [:g [:!Tg :g]] ; shortcut cheatsheet
        ;; [:v [:!Tg :v]] ; old cheat
        [:b [:!Tg :b]] ; git branch
        [:d [:!Tg :d]] ; git file
        [:l [:!Tg :l]] ; git commit
        [:h [:!Tg :h]] ; git file commit
        [:t [:!Tg :t]] ; git tag
        [:s [:!Tg :s]] ; git status
        [:e [:!Tg :e]] ; env
        [:a [:!Tg :a]] ; alias
        [:f [:!Tg :f]] ; env
        ;; reuse commands
        [:p [:!S1 :!S4 :return_or_enter]] ;; !$ last argument in last argument
        ;; [:6 [:!S1 :!S6 :return_or_enter]] ;; !^ first argument in last argument
        ;; [:8 [:!S1 :!S8 :return_or_enter]] ;; !* all arguments in last argument
        ;; [:9 [:!Tu :!S1 :!Ssemicolon :hyphen :return_or_enter]] ;; !-: last command excpt for last argument
        ;; [:0 [:!Tu :r :return_or_enter]] ;; execute last command
      ]
    }
  ]
}
