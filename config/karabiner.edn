;; ref
;;   - example: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org
;;   - example configuration: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/resources/configurations/edn/example.edn
;;   - tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;;   - keycodes: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
;;   - karabiner:
;;     - keycodes: https://github.com/pqrs-org/Karabiner-Elements/blob/main/src/apps/SettingsWindow/Resources/simple_modifications.json
;;     - modifiers keys: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/#frommodifiersmandatory
;;     - complex_modifications manipulator definition: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/
;;   - helpful user configuration examples
;;     - https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn

;; modifiers
;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md#command-a-to-control-1
;; ! for mandatory
;; # for optional
;; ## for optional any
;; C T O S for left command control optional shift
;; Q W E R for right command control optional shift
;; !! for mandatory command + control + optional + shift (hyper)
;; need to prefix C T O S F with ! or #
;; F for fn
;; P for caps_lock
{
  ;; Casesensitive
  :applications {
    :browser ["^com\\.microsoft\\.edgemac$" "^com\\.google\\.Chrome$" "^com\\.apple\\.Safari$"]
    :terminal ["^net.kovidgoyal.kitty$" "^com\\.googlecode\\.iterm2$" "^com.jetbrains" "^com\\.microsoft\\.VSCode$" "^com\\.apple\\.Terminal$"]
    :intelliJ ["^com.jetbrains"]

    :IDEA ["^com\\.jetbrains\\.intellij\\.ce$"]
    :GoLand ["^com\\.jetbrains\\.goland$"]

    :Edge ["^com\\.microsoft\\.edgemac$"]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :Kitty ["^net.kovidgoyal.kitty$"]
    :Alacritty ["^org.alacritty$"]
    :VSCode ["^com\\.microsoft\\.VSCode$"]
    :intelliJ-IDEA ["^com\\.jetbrains\\.intellij$"]
    :intelliJ-GoLand ["^com\\.jetbrains\\.goland$"]

    :WeChat ["^com\\.tencent\\.xinWeChat$"]
    :Discord ["^com\\.hnc\\.Discord$"]
    :Telegram ["^ru\\.keepcoder\\.Telegram$"]
    :Slack ["^com\\.tinyspeck\\.slackmacgap$"]

    :Karabiner-Elements ["^org\\.pqrs\\.Karabiner-Elements\\.Preferences$"]
    :Karabiner-EventViewer ["^org\\.pqrs\\.Karabiner-EventViewer$"]
    :Hammerspoon ["^org\\.hammerspoon\\.Hammerspoon$"]

    :OpenCat ["^tech\\.baye\\.OpenCat$"]
    :ChatGPT ["^com\\.openai\\.chat$"]
    :Obsidian ["^md\\.obsidian$"]
    :Notion ["^notion\\.id$"]
    :Things3 ["^com\\.culturedcode\\.ThingsMac$"]
    :Raindrop ["^io\\.raindrop\\.macapp$"]
    :Bitwarden ["^com\\.bitwarden\\.desktop$"]
    :Flomo ["^com\\.google\\.Chrome\\.app\\.mjnbhimggobpdngjimoodpenobognheo"]
    :PDFExpert ["^com\\.readdle\\.PDFExpert-Mac$"]
    :Youdao ["^com\\.youdao\\.YoudaoDict"]
    :Finder ["^com\\.apple\\.finder$"]
    :SystemReferences ["^com\\.apple\\.systempreferences$"]
    :Music ["^com\\.apple\\.Music$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :ActivityMonitor ["^com\\.apple\\.ActivityMonitor$"]
  }

  :input-sources {
    :pinyin {
        :input_mode_id "com.apple.inputmethod.SCIM.Shuangpin"
        :input_source_id "com.apple.inputmethod.SCIM.Shuangpin"
        :language "zh-Hans"
    }
    :us {
      :input_mode_id ""
      :input_source_id "com.apple.keylayout.US"
      :language "en"
    }
  }

  :templates {
    :open "open \"%s\""
    :openApp "/opt/homebrew/bin/hs -c \"spoon.Win.openOrHideApp('%s')\""
    :safeOpen "/opt/homebrew/bin/hs -c \"SafeOpen('%s')\""
    :edit "/usr/local/bin/code \"%s\""
    ;; AppleScipt keystroke and key code table: https://eastmanreference.com/complete-list-of-applescript-key-codes
    ;; have permission issues: 'System Events got an error: osascript is not allowed to send keystrokes.'
    ;; :alfred "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\" to keystroke \"%s\"'"
    ;; :alfred-execute "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\"' -e 'keystroke \"%s\"' -e 'key code 36' -e 'end tell'"
    :alfred "/opt/homebrew/bin/hs -c \"Alfred('%s')\""
    :alfred-execute "/opt/homebrew/bin/hs -c \"Alfred('%s', true)\""
    :alfred-flow "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :hs "/opt/homebrew/bin/hs -c \"%s\""
    :script "/usr/local/bin/bash ~/.dotfiles/karabiner/scripts/%s"

    :openObsidian "/opt/homebrew/bin/hs -c \"spoon.Win.openOrHideObsidian('%s')\""
    :zellij "/opt/homebrew/bin/zellij -s 'default' action %s"
  }

  ;;; helper function to generate things little bit quicker
  ;; quick define "layers" or "state" feature(use set_variable)
  ;; can use as conditions in rule list
  ;; {:<layer name> {:from <froms>}}
  :simlayers {
    ;; most frequently used modes
    :spacebar-mode {:key :spacebar}
    :terminal-mode {:key :j}
  }
  :simlayer-threshold 250

  ;; Examples
  ;; [:0 [:!!5] nil {:alone :pinyin}] change input method
  :main [
    {:des "keys without prefix"
      :rules [
        ; map caps_lock to control
        [:##caps_lock {:key :right_control} nil {:alone :escape}]
        ; super key
        ; [:##right_command {:key :right_command :modi [:right_control :right_option :right_shift]} nil {:alone :right_command}]
        ; [:escape :escape nil {:alone [:hs "spoon.Win.switchApp()"]}]
        [:escape nil nil {:alone :dashboard}]
        ; [:##left_shift :left_shift nil {:alone :caps_lock}]
        [:##right_shift :right_shift nil {:alone :caps_lock}]
      ]
    }
    {:des "Applications"
      :rules [
        [:!Th [:openApp "WeChat"]]
        [:!Tt [:openApp "Telegram"]]
        ; [:!Tm [:openApp "Discord"]]
        [:!Tj [:openApp "Slack"]]
        [:!Tq [:openApp "Music"]]

        [:!Tgrave_accent_and_tilde [:openApp "Obsidian"]]
        [:!Tc [:openApp "Google Chrome"]]
        [:!Tv [:openApp "Visual Studio Code"]]
        [:!Tr [:openApp "RustRover"]]
        [:!Te [:openApp "Finder"]]
        [:!Tk :!Ch :Alacritty]
        [:!Tk [:openApp "Alacritty"]]
        [:!Tbackslash [:openApp "Bitwarden"]]
        [:!Tn [:openApp "Notes"]]
        ; [:!Tr :!CTS4]  ;; Look word up in Eudic dictionary
        [:!Tz [:openApp "网易有道翻译"]]
      ]
    }
    {:des "left control"
      :rules [
        ; [:!TSv :!OSCf6]  ; show clipboard (supported by Raycast)
        [:!Tspacebar :!CTOSspacebar]  ;; Raycast
        ; [:!Tcomma [:hs "spoon.Config:activate()"]]  ;; Config
        [:!Tb [:hs "spoon.Bookmark:activate()"]]  ;; Bookmark
        ; [:!Tgrave_accent_and_tilde [:hs "spoon.Win.centerCursor()"]]  ;; Center mouse

        ;; desktop navigation
        ; [:!Ta :!CTOf7] ;; Previous Space
        ; [:!Td :!CTOf9] ;; Next Space
        ; [:!Tx :!!f2] ;; Application Windows
        ; [:!Ts :mission_control] ;; Mission Control
        ;; move window to space and focus
        ;; macOS 15 not work (https://github.com/Hammerspoon/hammerspoon/issues/3698)
        ; [:!TSz [:hs "MoveFocusedWindowToSpace('prev', true)"]]
        ; [:!TSc [:hs "MoveFocusedWindowToSpace('next', true)"]]
        [:!TSslash [:hs "ShowFocusedWindowInfo()"]]

        ; --- Windows management ---
        [:!Ttab [:hs "spoon.Win.moveToScreen('next')"]] ; move window to recent display and focus
        ; fullscreen
        ; [:!Treturn_or_enter [:!TCf]]
        ; fullscreen (local)
        ; [:!Tg [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 1 })"]]
        ; [:g [:hs "spoon.Win.resizeWindow({ x = 0.1, y = 0, w = 0.8, h = 1 })"]]
        [:!Tf [:hs "spoon.Win:activate()"]]  ;; Bookmark
        ; ; 1/2: ctrl (auto resize)
        ; [:!Tg [:hs "spoon.Win.resizeWindowAuto(0.5)"]]
        ; [:!TOg [:hs "spoon.Win.resizeWindowAuto(0.5, true)"]]
        ; ; 2/3: ctrl+cmd (auto resize)
        ; [:!TCg [:hs "spoon.Win.resizeWindowAuto(0.66)"]]
        ; [:!TCOg [:hs "spoon.Win.resizeWindowAuto(0.66, true)"]]
        ; ; 1/3: ctrl+cmd (auto resize)
        ; [:!TSg [:hs "spoon.Win.resizeWindowAuto(0.34)"]]
        ; [:!TSOg [:hs "spoon.Win.resizeWindowAuto(0.34, true)"]]
        ; ; 1/2: ctrl
        ; [:!Tleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 })"]]
        ; [:!Tdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 })"]]
        ; [:!Tright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 })"]]
        ; [:!Tup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 })"]]
        ; [:!TOleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 }, true)"]]
        ; [:!TOdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 }, true)"]]
        ; [:!TOright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 }, true)"]]
        ; [:!TOup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 }, true)"]]
        ; ; ; 2/3: ctrl+cmd
        ; [:!TCleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 })"]]
        ; [:!TCdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 })"]]
        ; [:!TCright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 })"]]
        ; [:!TCup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 })"]]
        ; [:!TCOleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 }, true)"]]
        ; [:!TCOdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 }, true)"]]
        ; [:!TCOright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 }, true)"]]
        ; [:!TCOup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 }, true)"]]
        ; ; ;; 1/3 ctrl+shift
        ; [:!TSleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 })"]]
        ; [:!TSdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.66 })"]]
        ; [:!TSright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 })"]]
        ; [:!TSup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 })"]]
        ; [:!TSOleft_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 }, true)"]]
        ; [:!TSOdown_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.34 }, true)"]]
        ; [:!TSOright_arrow [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 }, true)"]]
        ; [:!TSOup_arrow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 }, true)"]]

        ;; previous / next tabs
        [:!Ti :!CSopen_bracket :iTerm]
        [:!To :!CSclose_bracket :iTerm]
        [:!Ti :!TStab :Finder]
        [:!To :!Ttab :Finder]
        [:!Ti :!CSopen_bracket :VSCode]
        [:!To :!CSclose_bracket :VSCode]
        [:!Ti :!CSopen_bracket :intelliJ]
        [:!To :!CSclose_bracket :intelliJ]
        [:!Ti :up_arrow :WeChat]
        [:!To :down_arrow :WeChat]
        [:!Ti :!Oup_arrow :Discord]
        [:!To :!Odown_arrow :Discord]
        [:!Ti :!Oup_arrow :Telegram]
        [:!To :!Odown_arrow :Telegram]
        [:!Ti :!TStab]
        [:!To :!Ttab]

        ;; act like fn + f1..f12
        [:!Tf1 :display_brightness_decrement]
        [:!Tf2 :display_brightness_increment]
        [:!Tf3 :mission_control]
        [:!Tf4 :dashboard]
        [:!Tf7 :vk_consumer_previous]
        [:!Tf8 :play_or_pause]
        [:!Tf9 :vk_consumer_next]
        [:!Tf10 :mute]
        [:!Tf11 :volume_decrement]
        [:!Tf12 :volume_increment]
        ;; home / end
        ; [:!Thyphen [:home]]
        ; [:!Tequal_sign  [:end]]
        ; [:!TShyphen [:!Shome]]
        ; [:!TSequal_sign  [:!Send]]
      ]
    }
    {:des "spacebar mode"
      :rules [:spacebar-mode
        [:1 [:openObsidian "Coding"]]
        [:2 [:openObsidian "Rust"]]
        [:3 [:openObsidian "Web3"]]
        [:grave_accent_and_tilde [:openApp "Obsidian"]]
        [:c [:openApp "Google Chrome"]]

        [:v :!OSCf6]  ; show clipboard (supported by Raycast)
        [:q :!CTOf7] ;; Previous Space
        [:e :!CTOf9] ;; Next Space
        [:t :!!f2] ;; Application Windows
        [:r :mission_control] ;; Mission Control

        ; --- Windows management ---
        [:tab [:hs "spoon.Win.moveToScreen('next')"]] ; move window to recent display and focus
        ; fullscreen
        [:return_or_enter [:!TCf]]
        ; fullscreen (local)
        [:f [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 1 })"]]
        [:g [:hs "spoon.Win.resizeWindow({ x = 0.2, y = 0, w = 0.6, h = 1 })"]]
        [:h [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.2, w = 1, h = 0.6 })"]]
        [:m [:hs "spoon.Win:activate()"]]  ;; Window Manager
        ; ; 1/2
        [:a [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 })"]]
        [:s [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 })"]]
        [:d [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 })"]]
        [:w [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 })"]]
        [:!Oa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.5, h = 1 }, true)"]]
        [:!Os [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.5, w = 1, h = 0.5 }, true)"]]
        [:!Od [:hs "spoon.Win.resizeWindow({ x = 0.5, y = 0, w = 0.5, h = 1 }, true)"]]
        [:!Ow [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.5 }, true)"]]
        ; ;2/3 cmd
        [:!Ca [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 })"]]
        [:!Cs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 })"]]
        [:!Cd [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 })"]]
        [:!Cw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 })"]]
        [:!COa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.66, h = 1 }, true)"]]
        [:!COs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.34, w = 1, h = 0.66 }, true)"]]
        [:!COd [:hs "spoon.Win.resizeWindow({ x = 0.34, y = 0, w = 0.66, h = 1 }, true)"]]
        [:!COw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.66 }, true)"]]
        ; ; 1/3 shift
        [:!Sa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 })"]]
        [:!Ss [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.66 })"]]
        [:!Sd [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 })"]]
        [:!Sw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 })"]]
        [:!SOa [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 0.34, h = 1 }, true)"]]
        [:!SOs [:hs "spoon.Win.resizeWindow({ x = 0, y = 0.66, w = 1, h = 0.34 }, true)"]]
        [:!SOd [:hs "spoon.Win.resizeWindow({ x = 0.66, y = 0, w = 0.34, h = 1 }, true)"]]
        [:!SOw [:hs "spoon.Win.resizeWindow({ x = 0, y = 0, w = 1, h = 0.34 }, true)"]]
      ]
    }
    {:des "terminal (j)"
      :rules [[:condi :terminal-mode] ;; :terminal]
        ;; terminal
        [:escape [:!Tu :e :x :i :t :return_or_enter]] ; exit terminal
        [:r [:!Ta :t :l :d :r :spacebar :return_or_enter]] ; tldr
        [:u [:!Tu :c :l :e :a :r :return_or_enter]] ; clear screen
        ;; vim
        [:q [:escape :escape :!Ssemicolon :!Tu :q :!S1 :return_or_enter]] ; exit in vim
        [:w [:escape :escape :!Ssemicolon :!Tu :w :q :!S1 :return_or_enter]] ; save and exit in vim
        [:v [:spacebar :!Sbackslash :spacebar :v :i :m :spacebar :hyphen :return_or_enter]] ; temporary cat in vim
        ;; reload zsh
        [:z [:!Tu :e :x :e :c :spacebar :z :s :h :return_or_enter]]

        ;; zle widget
        [:c [:!Tg :c]] ; command cheatsheet
        [:g [:!Tg :g]] ; shortcut cheatsheet
        ;; [:v [:!Tg :v]] ; old cheat
        [:b [:!Tg :b]] ; git branch
        [:d [:!Tg :d]] ; git file
        [:l [:!Tg :l]] ; git commit
        [:h [:!Tg :h]] ; git file commit
        [:t [:!Tg :t]] ; git tag
        [:s [:!Tg :s]] ; git status
        [:e [:!Tg :e]] ; env
        [:a [:!Tg :a]] ; alias
        [:f [:!Tg :f]] ; env
        ;; reuse commands
        [:p [:!S1 :!S4 :return_or_enter]] ;; !$ last argument in last argument
        ;; [:6 [:!S1 :!S6 :return_or_enter]] ;; !^ first argument in last argument
        ;; [:8 [:!S1 :!S8 :return_or_enter]] ;; !* all arguments in last argument
        ;; [:9 [:!Tu :!S1 :!Ssemicolon :hyphen :return_or_enter]] ;; !-: last command excpt for last argument
        ;; [:0 [:!Tu :r :return_or_enter]] ;; execute last command
      ]
    }
  ]
}
